package swing.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import swing.client.Client.EscutaServidor;
 
public class GUI_tabs_v1_1 extends JFrame {
     
	//ATTRIBUTES
	private static final long serialVersionUID = 1L;
	
	//TAB CHAT
	JTextField textoParaEnviar;
	Socket socket;
	PrintWriter escritor;
	String nome;
	JTextArea textoRecebido;
	Scanner leitor;
	
	//CONSTRUCTOR
	public GUI_tabs_v1_1() {
         
    	//TABS
        setTitle("QuequeAPP");
        JTabbedPane jtp = new JTabbedPane();
        getContentPane().add(jtp);
        
        //PANEL1
        JPanel jp1 = new JPanel();
        JLabel label1 = new JLabel();
        label1.setText("MY CONTACTS");  
        jp1.add(label1);
        
        //PANEL2
        JPanel jp2 = new JPanel();
        JLabel label2 = new JLabel();
        label2.setText("MY CHAT");
        jp2.add(label2);
        
        //ADD PANELS TO TABS
        jtp.addTab("CONTACTS", jp1);
        jtp.addTab("CHAT", jp2);
         
    }
	
	//MAIN
    public static void main(String[] args) {
    	
    	//INITIALIZE
    	GUI_tabs_v1_1 tp = new GUI_tabs_v1_1();
    	tp.setSize(500, 500);
    	tp.setLocation(200, 200);
        tp.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        tp.setVisible(true);
      
    }
    
  //listener
  	private class EnviarListener implements ActionListener {
  		@Override
  		public void actionPerformed(ActionEvent arg0) {
  			escritor.println(nome + " -> " + textoParaEnviar.getText());
  			escritor.flush();//garantir que foi enviado
  			textoParaEnviar.setText("");//limpar campo de texto
  			textoParaEnviar.requestFocus();//colocar cursor dentro do campo
  		}
  	}

  	//ligacao com o servidor
  	private void configurarRede() throws Exception {
  	
  		try {
  			socket = new Socket("127.0.0.1", 6002);
  			escritor = new PrintWriter(socket.getOutputStream());
  			leitor = new Scanner(socket.getInputStream());
  			new Thread(new EscutaServidor()).start();
  		} catch (Exception e) {}
  	}
  		
  	//class de escuta do servidor
  	private class EscutaServidor implements Runnable {

  		@Override
  		public void run() {
  			try {
  				String texto;
  				while((texto = leitor.nextLine()) != null) {
  					//adiciona no final de todo o texto o novo texto
  					textoRecebido.append(texto + "\n");
  				}
  			} catch(Exception x) {}
  		}
  		
  	}
}

